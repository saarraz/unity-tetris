#nullable enable
using UnityEngine;
using System.Collections;
using System;

public class MusicTimer : ITimer
{
    public AudioSource AudioSource { get; private set; }
    public bool Paused { get; private set; }
    public int? TempoMultiplier { get; set; }

    public float Speed { get => OriginalLength / AudioSource.clip.length; }

    public float Tempo { get => (OriignalTempo / Speed) / (float)(TempoMultiplier ?? 4); }

    public float Offset = 0f;

    public float OriignalTempo = 0.857142f;

    public float OriginalLength = 68.62367f;

    public float[] OriginalBeatTimes =
    {
        0f,
        0.428571f,
        0.6428564999999999f,
        0.857142f,
        1.0714275f,
        1.17857025f,
        1.2857129999999999f,
        1.4999984999999998f,
        1.7142839999999997f,
        2.1428549999999995f,
        2.3571404999999994f,
        2.5714259999999993f,
        2.999996999999999f,
        3.214282499999999f,
        3.428567999999999f,
        4.071424499999999f,
        4.285709999999999f,
        4.714280999999999f,
        5.142851999999999f,
        5.5714229999999985f,
        5.999993999999998f,
        6.857135999999998f,
        7.499992499999998f,
        7.7142779999999975f,
        8.142848999999998f,
        8.357134499999999f,
        8.57142f,
        9.2142765f,
        9.428562000000001f,
        9.857133000000001f,
        10.071418500000002f,
        10.285704000000003f,
        10.714275000000002f,
        10.928560500000003f,
        11.142846000000004f,
        11.571417000000004f,
        11.999988000000004f,
        12.428559000000003f,
        12.857130000000003f,
        13.714272000000003f,
        14.142843000000003f,
        14.357128500000004f,
        14.571414000000004f,
        14.785699500000005f,
        14.892842250000005f,
        14.999985000000004f,
        15.214270500000005f,
        15.428556000000006f,
        15.857127000000006f,
        16.071412500000005f,
        16.285698000000004f,
        16.714269000000005f,
        16.928554500000004f,
        17.142840000000003f,
        17.785696500000004f,
        17.999982000000003f,
        18.428553000000004f,
        18.857124000000006f,
        19.285695000000008f,
        19.71426600000001f,
        20.57140800000001f,
        21.21426450000001f,
        21.42855000000001f,
        21.85712100000001f,
        22.07140650000001f,
        22.285692000000008f,
        22.92854850000001f,
        23.142834000000008f,
        23.57140500000001f,
        23.78569050000001f,
        23.999976000000007f,
        24.42854700000001f,
        24.642832500000008f,
        24.857118000000007f,
        25.28568900000001f,
        25.71426000000001f,
        26.14283100000001f,
        26.571402000000013f,
        26.999973000000015f,
        28.285686000000016f,
        29.142828000000016f,
        29.999970000000015f,
        30.857112000000015f,
        31.714254000000015f,
        32.571396000000014f,
        33.42853800000002f,
        33.857109000000015f,
        35.14282200000002f,
        35.99996400000002f,
        36.85710600000002f,
        37.714248000000026f,
        38.142819000000024f,
        38.57139000000002f,
        39.428532000000025f,
        40.28567400000003f,
        41.57138700000003f,
        41.78567250000003f,
        41.999958000000035f,
        42.21424350000004f,
        42.32138625000004f,
        42.42852900000004f,
        42.64281450000004f,
        42.857100000000045f,
        43.28567100000004f,
        43.499956500000046f,
        43.71424200000005f,
        44.14281300000005f,
        44.35709850000005f,
        44.57138400000005f,
        45.21424050000005f,
        45.428526000000055f,
        45.85709700000005f,
        46.28566800000005f,
        46.71423900000005f,
        47.14281000000005f,
        47.99995200000005f,
        48.64280850000005f,
        48.85709400000005f,
        49.28566500000005f,
        49.499950500000054f,
        49.71423600000006f,
        50.35709250000006f,
        50.57137800000006f,
        50.99994900000006f,
        51.21423450000006f,
        51.42852000000006f,
        51.85709100000006f,
        52.07137650000006f,
        52.285662000000066f,
        52.714233000000064f,
        53.14280400000006f,
        53.57137500000006f,
        53.99994600000006f,
        54.428517000000056f,
        55.28565900000005f,
        55.499944500000055f,
        55.71423000000006f,
        55.92851550000006f,
        56.03565825000006f,
        56.14280100000006f,
        56.357086500000065f,
        56.57137200000007f,
        56.999943000000066f,
        57.21422850000007f,
        57.42851400000007f,
        57.85708500000007f,
        58.07137050000007f,
        58.285656000000074f,
        58.928512500000075f,
        59.14279800000008f,
        59.571369000000075f,
        59.99994000000007f,
        60.42851100000007f,
        60.85708200000007f,
        61.71422400000007f,
        62.35708050000007f,
        62.571366000000076f,
        62.999937000000074f,
        63.214222500000076f,
        63.42850800000008f,
        64.07136450000007f,
        64.28565000000008f,
        64.71422100000008f,
        64.92850650000008f,
        65.14279200000009f,
        65.57136300000009f,
        65.7856485000001f,
        65.9999340000001f,
        66.4285050000001f,
        66.8570760000001f,
        67.28564700000011f,
        67.71421800000012f
        /*
        0f,
        0.2142855f,
        0.428571f,
        0.6428564999999999f,
        0.857142f,
        1.0714275f,
        1.17857025f,
        1.2857129999999999f,
        1.4999984999999998f,
        1.7142839999999997f,
        1.9285694999999996f,
        2.1428549999999995f,
        2.3571404999999994f,
        2.5714259999999993f,
        2.7857114999999992f,
        2.999996999999999f,
        3.214282499999999f,
        3.428567999999999f,
        3.642853499999999f,
        3.8571389999999988f,
        4.071424499999999f,7
        4.285709999999999f,
        4.499995499999999f,
        4.714280999999999f,
        4.928566499999999f,
        5.142851999999999f,
        5.3571374999999986f,
        5.5714229999999985f,
        5.785708499999998f,
        5.999993999999998f,
        6.214279499999998f,
        6.428564999999998f,
        6.642850499999998f,
        6.857135999999998f,
        7.071421499999998f,
        7.499992499999998f,
        7.7142779999999975f,
        8.142848999999998f,
        8.357134499999999f,
        8.57142f,
        8.7857055f,
        9.214276500000002f,
        9.428562000000003f,
        9.642847500000004f,
        9.857133000000005f,
        10.071418500000005f,
        10.285704000000006f,
        10.499989500000007f,
        10.714275000000008f,
        10.928560500000009f,
        11.14284600000001f,
        11.571417000000011f,
        11.999988000000013f,
        12.214273500000013f,
        12.428559000000014f,
        12.642844500000015f,
        12.857130000000016f,
        13.714272000000015f,
        13.928557500000016f,
        14.142843000000017f,
        14.357128500000018f,
        14.571414000000019f,
        14.78569950000002f,
        14.892842250000019f,
        14.999985000000018f,
        15.21427050000002f,
        15.42855600000002f,
        15.64284150000002f,
        15.857127000000022f,
        16.071412500000022f,
        16.28569800000002f,
        16.49998350000002f,
        16.71426900000002f,
        16.92855450000002f,
        17.142840000000017f,
        17.357125500000016f,
        17.571411000000015f,
        17.785696500000014f,
        17.999982000000013f,
        18.214267500000012f,
        18.42855300000001f,
        18.64283850000001f,
        18.85712400000001f,
        19.07140950000001f,
        19.285695000000008f,
        19.499980500000007f,
        19.714266000000006f,
        19.928551500000005f,
        20.142837000000004f,
        20.357122500000003f,
        20.571408f,
        20.7856935f,
        21.2142645f,
        21.428549999999998f,
        21.857120999999996f,
        22.071406499999995f,
        22.285691999999994f,
        22.499977499999993f,
        22.92854849999999f,
        23.14283399999999f,
        23.35711949999999f,
        23.571404999999988f,
        23.785690499999987f,
        23.999975999999986f,
        24.214261499999985f,
        24.428546999999984f,
        24.642832499999983f,
        24.857117999999982f,
        25.28568899999998f,
        25.714259999999978f,
        25.928545499999977f,
        26.142830999999976f,
        26.357116499999975f,
        26.571401999999974f,
        26.999972999999976f,
        27.428543999999977f,
        27.642829499999976f,
        27.857114999999975f,
        28.071400499999974f,
        28.285685999999973f,
        28.499971499999972f,
        28.71425699999997f,
        28.92854249999997f,
        29.14282799999997f,
        29.35711349999997f,
        29.571398999999968f,
        29.785684499999967f,
        29.999969999999966f,
        30.214255499999965f,
        30.428540999999964f,
        30.642826499999963f,
        30.85711199999996f,
        31.07139749999996f,
        31.28568299999996f,
        31.49996849999996f,
        31.714253999999958f,
        31.928539499999957f,
        32.14282499999996f,
        32.35711049999996f,
        32.571395999999964f,
        32.78568149999997f,
        32.99996699999997f,
        33.21425249999997f,
        33.428537999999975f,
        33.85710899999997f,
        34.28567999999997f,
        34.49996549999997f,
        34.714250999999976f,
        34.92853649999998f,
        35.14282199999998f,
        35.357107499999984f,
        35.571392999999986f,
        35.78567849999999f,
        35.99996399999999f,
        36.214249499999994f,
        36.428535f,
        36.6428205f,
        36.857106f,
        37.071391500000004f,
        37.28567700000001f,
        37.49996250000001f,
        37.71424800000001f,
        37.928533500000015f,
        38.14281900000002f,
        38.35710450000002f,
        38.57139000000002f,
        38.785675500000025f,
        38.99996100000003f,
        39.21424650000003f,
        39.42853200000003f,
        39.642817500000035f,
        39.85710300000004f,
        40.07138850000004f,
        40.28567400000004f,
        41.142816000000046f,
        41.35710150000005f,
        41.57138700000005f,
        41.785672500000054f,
        41.999958000000056f,
        42.21424350000006f,
        42.32138625000006f,
        42.42852900000006f,
        42.642814500000064f,
        42.85710000000007f,
        43.07138550000007f,
        43.28567100000007f,
        43.499956500000074f,
        43.71424200000008f,
        43.92852750000008f,
        44.14281300000008f,
        44.357098500000085f,
        44.57138400000009f,
        44.78566950000009f,
        44.99995500000009f,
        45.214240500000095f,
        45.4285260000001f,
        45.6428115000001f,
        45.8570970000001f,
        46.071382500000105f,
        46.28566800000011f,
        46.49995350000011f,
        46.71423900000011f,
        46.928524500000115f,
        47.14281000000012f,
        47.35709550000012f,
        47.57138100000012f,
        47.785666500000126f,
        47.99995200000013f,
        48.21423750000013f,
        48.642808500000136f,
        48.85709400000014f,
        49.285665000000144f,
        49.499950500000146f,
        49.71423600000015f,
        49.92852150000015f,
        50.35709250000016f,
        50.57137800000016f,
        50.78566350000016f,
        50.999949000000164f,
        51.21423450000017f,
        51.42852000000017f,
        51.64280550000017f,
        51.857091000000175f,
        52.07137650000018f,
        52.28566200000018f,
        52.714233000000185f,
        53.14280400000019f,
        53.35708950000019f,
        53.571375000000195f,
        53.7856605000002f,
        53.9999460000002f,
        54.4285170000002f,
        54.857088000000196f,
        55.0713735000002f,
        55.2856590000002f,
        55.499944500000204f,
        55.71423000000021f,
        55.92851550000021f,
        56.03565825000021f,
        56.14280100000021f,
        56.357086500000214f,
        56.57137200000022f,
        56.78565750000022f,
        56.99994300000022f,
        57.214228500000225f,
        57.42851400000023f,
        57.64279950000023f,
        57.85708500000023f,
        58.071370500000235f,
        58.28565600000024f,
        58.49994150000024f,
        58.71422700000024f,
        58.928512500000245f,
        59.14279800000025f,
        59.35708350000025f,
        59.57136900000025f,
        59.785654500000255f,
        59.99994000000026f,
        60.21422550000026f,
        60.42851100000026f,
        60.642796500000266f,
        60.85708200000027f,
        61.07136750000027f,
        61.28565300000027f,
        61.499938500000276f,
        61.71422400000028f,
        61.92850950000028f,
        62.357080500000286f,
        62.57136600000029f,
        62.999937000000294f,
        63.2142225000003f,
        63.4285080000003f,
        63.6427935000003f,
        64.0713645000003f,
        64.2856500000003f,
        64.4999355000003f,
        64.71422100000031f,
        64.92850650000031f,
        65.14279200000031f,
        65.35707750000032f,
        65.57136300000032f,
        65.78564850000032f,
        65.99993400000032f,
        66.42850500000033f,
        66.85707600000033f,
        67.07136150000034f,
        67.28564700000034f,
        67.49993250000034f,
        67.71421800000034f,*/
    };

    private float _lastBeat = 0;

    public MusicTimer(AudioSource audioSource)
    {
        AudioSource = audioSource;
    }

    public void Pause()
    {
        Paused = true;
    }

    public void Resume()
    {
        Paused = false;
    }

    public Tuple<float, float> GetCurrentBeat()
    {
        var playbackTime = AudioSource.time;
        float currentBeatTime = 0;
        float nextBeatTime = 0;
        if (TempoMultiplier != null)
        {
            float multipliedTempo = Tempo;
            int beatCount = (int)System.Math.Floor(playbackTime / multipliedTempo);
            currentBeatTime = multipliedTempo * beatCount;
            nextBeatTime = multipliedTempo * (beatCount + 1);
        }
        else
        {
            var audioSpeed = Speed;
            for (int i = 0; i < OriginalBeatTimes.Length; ++i)
            {
                currentBeatTime = OriginalBeatTimes[i] / audioSpeed;
                if (i == OriginalBeatTimes.Length - 1)
                {
                    nextBeatTime = OriginalLength / audioSpeed;
                } else
                {
                    nextBeatTime = OriginalBeatTimes[i + 1] / audioSpeed;
                }
                if (playbackTime >= currentBeatTime && playbackTime < nextBeatTime)
                {
                    break;
                }
            }
        }
        currentBeatTime += Offset;
        nextBeatTime += Offset;
        return Tuple.Create(currentBeatTime, nextBeatTime);
    }

    public float TimeToNextBeat()
    {
        (_, var nextBeatTime) = GetCurrentBeat();
        return nextBeatTime - AudioSource.time;
    }

    public bool OnUpdate()
    {
        if (Paused)
        {
            Debug.Log("PAUSED");
            return false;
        }

        (var currentBeatTime, _) = GetCurrentBeat();
        if (_lastBeat != currentBeatTime)
        {
            _lastBeat = currentBeatTime;
            return true;
        }
        return false;
    }
}
